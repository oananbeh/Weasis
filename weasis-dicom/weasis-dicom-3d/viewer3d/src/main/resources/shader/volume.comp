#version 430

layout (local_size_x = 16, local_size_y = 16) in ;
layout (rgba32f, binding = 0) uniform image2D outputImage;
layout (binding = 0) uniform sampler3D volTexture;
layout (binding = 1) uniform sampler2D colorMap;
layout (binding = 2) uniform sampler2D lightingMap;

#include "voxelUniforms.glsl"

#include "voxelFunctions.glsl"

#include "vrFunctions.glsl"

void main() {

    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 imageDims = imageSize(outputImage);
    if (pixelCoords.x >= imageDims.x || pixelCoords.y >= imageDims.y) {
        return;
    }

    vec2 uv;
    uv.x = (float(pixelCoords.x * 2 - imageDims.x) / imageDims.x);
    uv.y = (float(pixelCoords.y * 2 - imageDims.y) / imageDims.y);

    vec4 pixelVal = vec4(0);
    if (renderingType >= typeSlice) {
        pixelVal = slice(uv);
    } else {
        // Volume Rendering
        float tmin = 0.0;
        float tmax = 0.0;
        Ray ray = CreateCameraRay(uv);
        intersect(ray, tmin, tmax);
        if (tmax >= tmin) {
            if (renderingType == typeComposite) {
                pixelVal = rayCastingComposite(ray, tmin, tmax, uv);
            } else if (renderingType == typeMip) {
                pixelVal = rayCastingMip(ray, tmin, tmax, uv);
            } else if (renderingType == typeIsoSurface) {
                pixelVal = rayCastingIsoSurface(ray, tmin, tmax, uv);
            }
        }
    }
    imageStore(outputImage, pixelCoords, pixelVal);
}